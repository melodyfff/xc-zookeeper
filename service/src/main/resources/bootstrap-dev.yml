# 接入配置中心的例子

server:
  port: 8761

spring:
  application:
    name: xc-zookeeper-services # 服务提供

  cloud:
    zookeeper:
      config:
        enable: true
        defaultContext: xc-zookeeper-config # 配置文件名称,默认为application ZookeeperPropertySource {name='config/application'}]
        root: config # 默认路径config
        watcher: false # 监控zookeeper的配置变更 经过测试,即使设置为false也可以立即更新
        profileSeparator: "," # 分割符号 命名规则:/config/{application-name},{profile} 栗子: /config/xc-zookeeper-config,dev /config/xc-zookeeper-config,test
        # PS: 配置是需要建立在/config/xc-zookeeper-config,dev目录下的,如 在zk中操作 create /config/xc-zookeeper-config,dev/hello.message "Hello World from dev profile"
      connect-string: 127.0.0.1:2181
      discovery:
        enabled: true
        register: true
        root: /services # 服务根目录
        # instance-id: xc-zookeeper-1 指定在zk中的唯一id,未配置则自动生成如: 7e3a3014-ae49-4fc7-b077-5da1ddb58d37
        # dependency-names:  https://cloud.spring.io/spring-cloud-zookeeper/reference/html/#spring-cloud-zookeeper-dependencies

    loadbalancer:
      ribbon:
        enabled: false # 默认是true ,默认线性访问,如果打开,同时启动两个服务的时候,curl去访问,则会发现会顺序调用,负载均衡
        # 如果设置为false 则使用spring-cloud-loadbalancer的BlockingLoadBalancerClient替代
      cache:
        caffeine:
          spec: initialCapacity=50,maximumSize=500,expireAfterWrite=10s
